//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputSystem/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Paddles"",
            ""id"": ""8877cf7b-d843-4122-be59-ce4175e86785"",
            ""actions"": [
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""244b40dd-b542-49be-b698-e30619823914"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""8e91f0d7-8ec0-4a30-b621-ecbcee02fb1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4d151ad7-b2b2-451e-84af-8907d1d0cb98"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1970d079-fe29-436e-992e-f3c60463ed5a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Paddles
        m_Paddles = asset.FindActionMap("Paddles", throwIfNotFound: true);
        m_Paddles_Right = m_Paddles.FindAction("Right", throwIfNotFound: true);
        m_Paddles_Left = m_Paddles.FindAction("Left", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Paddles
    private readonly InputActionMap m_Paddles;
    private List<IPaddlesActions> m_PaddlesActionsCallbackInterfaces = new List<IPaddlesActions>();
    private readonly InputAction m_Paddles_Right;
    private readonly InputAction m_Paddles_Left;
    public struct PaddlesActions
    {
        private @Controls m_Wrapper;
        public PaddlesActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Right => m_Wrapper.m_Paddles_Right;
        public InputAction @Left => m_Wrapper.m_Paddles_Left;
        public InputActionMap Get() { return m_Wrapper.m_Paddles; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PaddlesActions set) { return set.Get(); }
        public void AddCallbacks(IPaddlesActions instance)
        {
            if (instance == null || m_Wrapper.m_PaddlesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PaddlesActionsCallbackInterfaces.Add(instance);
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
        }

        private void UnregisterCallbacks(IPaddlesActions instance)
        {
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
        }

        public void RemoveCallbacks(IPaddlesActions instance)
        {
            if (m_Wrapper.m_PaddlesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPaddlesActions instance)
        {
            foreach (var item in m_Wrapper.m_PaddlesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PaddlesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PaddlesActions @Paddles => new PaddlesActions(this);
    public interface IPaddlesActions
    {
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
    }
}
